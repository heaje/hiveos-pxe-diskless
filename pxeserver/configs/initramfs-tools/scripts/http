# HTTP Hiveon filesystem mounting			-*- shell-script -*-

# FIXME This needs error checking
. /scripts/i915.ids
http_top()
{
	if [ "${http_top_used}" != "yes" ]; then
		[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/http-top"
		run_scripts /scripts/http-top
		[ "$quiet" != "y" ] && log_end_msg
	fi
	http_top_used=yes
}

http_premount()
{
	if [ "${http_premount_used}" != "yes" ]; then
		[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/http-premount"
		run_scripts /scripts/http-premount
		[ "$quiet" != "y" ] && log_end_msg
	fi
	http_premount_used=yes
}

http_bottom()
{
	if [ "${http_premount_used}" = "yes" ] || [ "${http_top_used}" = "yes" ]; then
		[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/http-bottom"
		run_scripts /scripts/http-bottom
		[ "$quiet" != "y" ] && log_end_msg
	fi
	http_premount_used=no
	http_top_used=no
}

# parse nfs bootargs and mount nfs
http_mount_root_impl()
{
	configure_networking

	
}

# HTTP root mounting
http_mount_root()
{
	http_top

	modprobe af_packet

	wait_for_udev 10

	# Default delay is around 180s
	delay=${ROOTDELAY:-180}

	# loop until httpmount succeeds
	http_mount_root_impl
	ret=$?
	http_retry_count=0
	while [ ${http_retry_count} -lt ${delay} ] \
		&& [ $ret -ne 0 ] ; do
		[ "$quiet" != "y" ] && log_begin_msg "Retrying http mount"
		/bin/sleep 1
		http_mount_root_impl
		ret=$?
		http_retry_count=$(( ${http_retry_count} + 1 ))
		[ "$quiet" != "y" ] && log_end_msg
	done
	echo "> Create tmpfs for root dir, size=${ram_fs_size}"
	mount -t tmpfs -o size=${ram_fs_size} tmpfs ${rootmnt}
	cd ${rootmnt}
	echo "> Download and extract FS to RAM"
	fs_size=$(curl -sI ${httproot}${hive_fs_arch} 2>&1 | grep "Length" | awk '{print $2}')
	curl -s ${httproot}${hive_fs_arch} | pv -s $fs_size | tar --lzma -xf -

	count_amd=$(/bin/lspci -nd 1002::0300 | wc -l)
	if [[ $count_amd -gt 0 ]]; then
		echo "> Found $count_amd AMD GPU's"
		### Get Opencl files
		echo "Download and extract OPENCL libs"
		fs_size=$(curl -sI ${httproot}${opencl_version} 2>&1 | grep "Length" | awk '{print $2}')
		curl -s ${httproot}${opencl_version} | pv -s $fs_size | tar --lzma -xf -
		echo "Download and extract firmwares"
		fs_size=$(curl -sI ${httproot}/amdgpu_fw.tar.xz 2>&1 | grep "Length" | awk '{print $2}')
		curl -s ${httproot}/amdgpu_fw.tar.xz | pv -s $fs_size | tar --lzma -xf -
		/bin/touch hive-config/.DISKLESS_AMD
	fi
	#read -t 5 -p "Press any key to resume ..."
	
	count_nv=$(/bin/lspci -nd 10de::0300 | wc -l)
	[[ $count_nv -eq 0 ]] && count_nv=$(/bin/lspci -nd 10de::0302 | wc -l)
	if [[ $count_nv -gt 0 ]]; then
		echo "> Found $count_nv NVIDIA GPU's"
		### Get NVIDIA files
		echo "> Download and extract NVIDIA libs and modules"
		fs_size=$(curl -sI ${httproot}/nvidia/${nvidia_version} 2>&1 | grep "Length" | awk '{print $2}')
		curl -s ${httproot}/nvidia/${nvidia_version} | pv -s $fs_size | tar --lzma -xf -

		echo "> Download and extract Xorg libs and modules"
		fs_size=$(curl -sI ${httproot}/X.tar.xz 2>&1 | grep "Length" | awk '{print $2}')
		curl -s ${httproot}/X.tar.xz | pv -s $fs_size | tar --lzma -xf -
		/bin/touch hive-config/.DISKLESS_NVIDIA
	fi
	
	count_intel=$(/bin/lspci -n | grep -Ei "$INTEL_DG_IDS" | wc -l)
	if [[ $count_intel -gt 0 ]]; then
		echo "> Found $count_intel INTEL dGPU's"
		echo "> Download and extract INTEL firmwares"
		fs_size=$(curl -sI ${httproot}/nvidia/i915_fw.tar.xz 2>&1 | grep "Length" | awk '{print $2}')
		curl -s ${httproot}/i915_fw.tar.xz | pv -s $fs_size | tar --lzma -xf -
	fi
	#read -t 15 -p "Press any key to resume ..."

	[[ $? == 0 ]] && log_end_msg
	
	#Probe custom config
	/bin/wget2 -q --spider ${httproot}${ethaddr}/hive-config/
	if [[ $? == 0 ]]; then
		echo "> Found custom config for $ethaddr..."
		httproot=${httproot}${ethaddr}/
	fi
	/bin/wget2 -q --spider ${httproot}hive-config/
	if [[ $? == 0 ]]; then
		cd hive-config
		NDIR=$((`echo "${httproot}hive-config/"|sed 's|[^/]||g;s|/$||'|wc -c` - 3))
		/bin/wget2 -q -nH --no-parent -r --cut-dirs=$NDIR "${httproot}hive-config/"
		/bin/find -type f -name "index*" -exec rm -f {} \;
		/bin/touch .DISKLESS
		echo "Create FS in RAM successfull"
	else
		echo "Error. Config not found!"
	fi
}

http_mount_fs_impl()
{
	configure_networking

	http_premount

	read_fstab_entry "$1"

}

http_mount_fs()
{
	http_top

	# For DHCP
	modprobe af_packet

	wait_for_udev 10

	# Default delay is around 180s
	delay=${ROOTDELAY:-180}

	# Don't loop here; we can't sanely check if it worked like for
	# the rootfs or /etc.
	http_mount_fs_impl "$1"
}

mountroot()
{
	http_mount_root
}

mount_top()
{
	# Note, also called directly in case it's overridden.
	http_top
}

mount_premount()
{
	# Note, also called directly in case it's overridden.
	http_premount
}

mount_bottom()
{
	# Note, also called directly in case it's overridden.
	http_bottom
}
